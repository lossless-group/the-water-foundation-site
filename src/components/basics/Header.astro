---
// @ts-ignore - Astro component imports
import ResponsiveContainer from '../../layouts/ResponsiveContainer.astro';
import SiteBrandMarkModeWrapper from '../ui/SiteBrandMarkModeWrapper.astro';
import ModeToggle from '../ui/ModeToggle.astro';
import InternalLink from '../ui/InternalLinkWrapper.astro';

export interface Props {
  siteTitle?: string;
  navItems?: Array<{
    text: string;
    href: string;
    isActive?: boolean;
  }>;
  cta?: {
    text: string;
    href: string;
    variant?: 'primary' | 'secondary' | 'outline';
  };
  class?: string;
  className?: string; // For backward compatibility
}

const {
  siteTitle = 'The Water Foundation',
  navItems = [
    { text: 'About', href: '/about' },
    { text: 'People', href: '/the-people' },
    { text: 'Impact', href: '/impact' },
    { text: 'Slides', href: '/slides' }
  ],
  cta = {
    text: 'Partner with Us',
    href: '/partners',
    variant: 'primary' as const
  },
  class: className = ''
} = Astro.props as Props;

// Mobile menu toggle logic will be handled in the client-side script
---

<header id="main-header" class={`bg-background/80 backdrop-blur-sm border-b border-border/10 sticky top-0 z-50 w-full ${className}`}>
  <ResponsiveContainer class="relative flex h-16 items-center justify-between md:h-20">
    <!-- Logo and mobile menu button -->
    <div class="flex items-center">
      <a href="/" class="flex items-center gap-2">
        <div class="h-10 w-auto">
          <SiteBrandMarkModeWrapper className="h-full" />
        </div>
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden md:flex md:items-center md:space-x-6 lg:space-x-8">
      <ul class="flex items-center space-x-6">
        {navItems.map((item) => (
          <li>
            <InternalLink 
              href={item.href}
              isActive={item.isActive}
            >
              {item.text}
            </InternalLink>
          </li>
        ))}
      </ul>
      
      {cta ? (
        <div class="ml-6 lg:ml-8">
          <a 
            href={cta.href}
            class:list={[
              'inline-flex items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
              cta.variant === 'primary' ? 'bg-primary text-primary-foreground hover:bg-primary/90' : '',
              cta.variant === 'secondary' ? 'bg-secondary text-secondary-foreground hover:bg-secondary/80' : '',
              cta.variant === 'outline' ? 'border border-input bg-background hover:bg-accent hover:text-accent-foreground' : ''
            ]}
          >
            {cta.text}
          </a>
        </div>
      ) : null}

      <!-- Mode Toggle Button -->
      <div class="ml-2">
        <ModeToggle />
      </div>
    </nav>

    <!-- Mobile menu button -->
    <div class="flex items-center md:hidden">
      <button
        id="mobile-menu-button"
        type="button"
        class="inline-flex items-center justify-center rounded-md p-2 text-foreground/70 hover:bg-accent hover:text-foreground focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary"
        aria-label="Toggle menu"
        aria-expanded="false"
      >
        <span class="sr-only">Open main menu</span>
        <svg
          id="menu-open-icon"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
          />
        </svg>
        <svg
          id="menu-close-icon"
          class="h-6 w-6 hidden"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>
  </ResponsiveContainer>

  <!-- Mobile menu, show/hide based on menu state. -->
  <div 
    id="mobile-menu"
    class="md:hidden hidden"
  >
    <div class="space-y-1 bg-background pb-3 pt-2">
      <ResponsiveContainer>
        {navItems.map((item) => (
          <InternalLink
            href={item.href}
            isActive={item.isActive}
            class={[
              'block px-3 py-2 text-base font-medium',
              item.isActive 
                ? 'bg-accent text-accent-foreground' 
                : 'hover:bg-accent hover:text-accent-foreground'
            ].join(' ')}
          >
            {item.text}
          </InternalLink>
        ))}
        {cta ? (
          <div class="mt-4">
            <a
              href={cta.href}
              class:list={[
                'block w-full rounded-md px-4 py-2 text-center text-base font-medium',
                cta.variant === 'primary' ? 'bg-primary text-primary-foreground hover:bg-primary/90' : '',
                cta.variant === 'secondary' ? 'bg-secondary text-secondary-foreground hover:bg-secondary/80' : '',
                cta.variant === 'outline' ? 'border border-input bg-background hover:bg-accent hover:text-accent-foreground' : ''
              ]}
            >
              {cta.text}
            </a>
          </div>
        ) : null}
      </ResponsiveContainer>
    </div>
  </div>
</header>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', function() {
    
    // Mobile menu toggle
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpenIcon = document.getElementById('menu-open-icon');
    const menuCloseIcon = document.getElementById('menu-close-icon');
    
    if (menuButton && mobileMenu && menuOpenIcon && menuCloseIcon) {
      menuButton.addEventListener('click', () => {
        const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
        menuButton.setAttribute('aria-expanded', String(!isExpanded));
        
        // Toggle menu with animation
        if (isExpanded) {
          // Closing animation
          mobileMenu.style.display = 'block';
          mobileMenu.classList.remove('mobile-menu-enter-active');
          mobileMenu.classList.add('mobile-menu-leave');
          
          setTimeout(() => {
            mobileMenu.classList.remove('mobile-menu-leave');
            mobileMenu.classList.remove('mobile-menu-leave-active');
            mobileMenu.style.display = 'none';
          }, 75);
        } else {
          // Opening animation
          mobileMenu.style.display = 'block';
          mobileMenu.classList.add('mobile-menu-enter');
          setTimeout(() => {
            mobileMenu.classList.remove('mobile-menu-enter');
            mobileMenu.classList.add('mobile-menu-enter-active');
          }, 10);
        }
        
        menuOpenIcon.classList.toggle('hidden');
        menuCloseIcon.classList.toggle('hidden');
        document.body.classList.toggle('menu-open');
      });
      
      // Close menu when clicking on a link
      mobileMenu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.style.display = 'none';
          menuButton.setAttribute('aria-expanded', 'false');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
          document.body.classList.remove('menu-open');
        });
      });
      
      // Close menu when pressing Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && mobileMenu.style.display === 'block') {
          mobileMenu.style.display = 'none';
          menuButton.setAttribute('aria-expanded', 'false');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
          document.body.classList.remove('menu-open');
        }
      });
    }
  });
</script>

<style>
  /* Mobile menu animation classes */
  .mobile-menu-enter {
    opacity: 0;
    transform: scale(0.95);
  }
  .mobile-menu-enter-active {
    opacity: 1;
    transform: scale(1);
    transition: opacity 100ms ease-out, transform 100ms ease-out;
  }
  .mobile-menu-leave {
    opacity: 1;
    transform: scale(1);
  }
  .mobile-menu-leave-active {
    opacity: 0;
    transform: scale(0.95);
    transition: opacity 75ms ease-in, transform 75ms ease-in;
  }
  
  /* Smooth scrolling for anchor links */
  html {
    scroll-behavior: smooth;
  }
  
  @media (max-width: 767px) {
    body.menu-open {
      overflow: hidden;
    }
  }
  
  /* Container query for header */
  @container (min-width: 1024px) {
    .header-lg {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .header-dark {
      background-color: rgba(15, 23, 42, 0.8);
      border-color: rgba(255, 255, 255, 0.1);
    }
  }
</style>
