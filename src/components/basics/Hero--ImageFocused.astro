---
import ButtonPrimary from './buttons/Button--Primary.astro';
import ButtonSecondary from './buttons/Button--Secondary.astro';
import ButtonAccent from './buttons/Button--Accent.astro';
import ButtonVariants from './buttons/Button--Variants.astro';

export interface Props {
  overlayComponent?: any;
  contextSetterTxt?: string;
  contextSetterClassName?: string;
  headerTxt?: string;
  headerClassName?: string;
  headerLogoSrc?: string;
  subHeaderTxt?: string;
  subHeaderClassName?: string;
  supportingCopyTxt?: string;
  supportingCopyClassName?: string;
  ctaTxt?: string;
  ctaClassName?: string;
  noPadding?: boolean;
  paddingClasses?: string;
  cycleInterval?: number;
  targetActionsArray?: Array<{
    text: string;
    href: string;
    type: 'primary' | 'secondary' | 'accent' | 'lean' | 'gradient' | 'animated' | 'ghost' | 'text-gradient' | 'partner';
    buttonVariant?: 'solid' | 'transparent';
    external?: boolean;
    icon?: string;
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    children?: string;
    className?: string;
  }>;
  backgroundsArray?: Array<{
    type: 'image' | 'gradient' | 'video' | 'gif';
    src?: string;
    alt?: string;
    gradient?: string;
    overlay?: boolean;
    overlayOpacity?: number;
    overlayGradient?: string;
  }>;
}

const {
  contextSetterTxt = '',
  contextSetterClassName = '',
  headerTxt = '',
  headerClassName = '',
  headerLogoSrc = '',
  subHeaderTxt = '',
  subHeaderClassName = '',
  supportingCopyTxt = '',
  supportingCopyClassName = '',
  ctaTxt = '',
  ctaClassName = '',
  noPadding = false,
  paddingClasses = '',
  cycleInterval = 5000,
  targetActionsArray = [],
  backgroundsArray = [],
} = Astro.props;



// Default background if none provided
const defaultBackground = {
    type: 'gradient' as const,
    gradient: 'from-primary-50 to-secondary-100',
    src: undefined,
    alt: undefined,
    overlay: false,
    overlayOpacity: 0.4,
    overlayGradient: undefined
};

const backgrounds = backgroundsArray.length > 0 ? backgroundsArray : [defaultBackground];
const heroId = `hero-image-focused-${Math.random().toString(36).substr(2, 9)}`;

// Generate background classes based on background type
const getBackgroundClasses = (bg: any) => {
    switch (bg.type) {
      case 'gradient':
        return `bg-gradient-to-br ${bg.gradient || 'from-primary-50 to-secondary-100'}`;
      case 'image':
      case 'gif':
        return 'bg-cover bg-center bg-no-repeat';
      case 'video':
        return 'relative overflow-hidden';
      default:
        return 'bg-secondary-50';
    }
};
---

<section 
  id={heroId}
  class={`relative min-h-screen flex items-end justify-start overflow-hidden w-screen left-1/2 right-1/2 -mx-[50vw] ${!noPadding ? paddingClasses : ''}`}
  style="--cycle-interval: ${cycleInterval}ms;"
>
  <!-- Background Container - Full width, no margins -->
  <div class="backgrounds-container absolute inset-0">
    {backgrounds.map((bg, index: number) => {
      const backgroundClasses = getBackgroundClasses(bg);
      const isFirst = index === 0;
      
      return (
        <div 
          class={`background-item absolute inset-0 transition-opacity duration-1000 ease-in-out ${backgroundClasses} ${isFirst ? 'opacity-100' : 'opacity-0'}`}
          style={`
            z-index: 1;
            ${bg.type === 'image' ? `background-image: url('${bg.src}')` : ''}
          `}
          aria-hidden={!isFirst}
        >
          {bg.type === 'gif' && bg.src && (
            <img
              src={bg.src}
              alt={bg.alt || 'Background animation'}
              class="absolute inset-0 w-full h-full object-cover"
            />
          )}
          
          {bg.type === 'video' && bg.src && (
            <video
              class="absolute inset-0 w-full h-full object-cover"
              autoplay
              muted
              loop
              playsinline
            >
              <source src={bg.src} type="video/mp4" />
            </video>
          )}
          
          {bg.overlay && (
            <div 
              class="absolute inset-0"
              style={`
                z-index: 2;
                ${bg.overlayGradient 
                  ? `background: ${bg.overlayGradient}` 
                  : 'background-color: rgb(15, 23, 42)'
                };
                opacity: ${bg.overlayOpacity || 0.4};
              `}
            ></div>
          )}
        </div>
      );
    })}
  </div>

  <!-- Hero Content - Compressed spacing, bottom positioned, left-aligned text -->
  <div class="absolute inset-0 z-10 w-full">
    <div class="container mx-auto h-full">
      <div class="h-full flex items-start pt-10">
        <div class="w-full">
          <slot name="overlay" />
        </div>
      </div>
    </div>
  </div>

  <div class="relative z-10 w-full max-w-full px-30 pb-16">
    <div class="flex flex-col lg:flex-row lg:items-end lg:justify-between gap-8 lg:gap-16">
      
      <!-- Left side: Text content -->
      <div class="flex-1 text-left space-y-3 lg:space-y-4 max-w-2xl">
        <!-- Context Setter -->
        {contextSetterTxt && (
          <a href="/impact">
            <div class="inline-flex items-center px-3 py-1 rounded-full bg-accent-100/90 border border-accent-200/50 backdrop-blur-sm">
              <span class={`text-xs font-medium text-accent-800 tracking-wide uppercase ${contextSetterClassName}`}>
                {contextSetterTxt}
              </span>
            </div>
          </a>
        )}

        <!-- Main Header with Logo or Text -->
        <div class="space-y-2">
          {headerLogoSrc ? (
            <div class="max-w-2xl">
              <img 
                src={headerLogoSrc} 
                alt={headerTxt} 
                class={`w-full h-auto max-h-24 md:max-h-32 lg:max-h-40 object-contain object-left ${headerClassName}`}
              />
            </div>
          ) : (
            <h1 class={`font-brand text-3xl md:text-5xl lg:text-6xl font-bold text-white leading-tight drop-shadow-lg ${headerClassName}`}>
              {headerTxt}
            </h1>
          )}
          
          {subHeaderTxt && (
            <h2 class={`text-lg md:text-xl lg:text-2xl font-medium text-white/90 leading-snug drop-shadow-md mt-4 ${subHeaderClassName}`}>
              {subHeaderTxt}
            </h2>
          )}
        </div>

        <!-- Supporting Copy -->
        {supportingCopyTxt && (
          <div class="max-w-xl">
            <p class={`text-base md:text-lg text-white/80 leading-relaxed drop-shadow-md ${supportingCopyClassName}`}>
              {supportingCopyTxt}
            </p>
          </div>
        )}

        <!-- Call to Action Text -->
        {ctaTxt && (
          <p class={`text-base font-medium text-white/90 drop-shadow-md ${ctaClassName}`}>
            {ctaTxt}
          </p>
        )}
      </div>

      <!-- Right side: Action buttons -->
      {targetActionsArray.length > 0 && (
        <div class="flex flex-col sm:flex-row lg:flex-col gap-3 lg:gap-4 lg:items-end">
          {targetActionsArray.map((action, index) => {
            const buttonVariant = action.buttonVariant || 'solid';
            
            // Add a unique key for each button
            const buttonProps = {
              href: action.href,
              text: action.text || action.children || 'Button',
              external: action.external || false,
              variant: buttonVariant,
              size: action.size || 'md',
              class: action.className || ''
            };
            
            // Use action.type for variant to match the type definition
            switch (action.type || 'primary') {
              case 'primary':
                return <ButtonPrimary {...buttonProps} />;
              case 'secondary':
                return <ButtonSecondary {...buttonProps} />;
              case 'accent':
                return <ButtonAccent {...buttonProps} />;
              case 'lean':
                return <ButtonVariants {...buttonProps} variant="lean" />;
              case 'gradient':
                return <ButtonVariants {...buttonProps} variant="gradient" />;
              case 'animated':
                return <ButtonVariants {...buttonProps} variant="animated" />;
              case 'ghost':
                return <ButtonVariants {...buttonProps} variant="ghost" />;
              case 'text-gradient':
                return <ButtonVariants {...buttonProps} variant="text-gradient" />;
              case 'partner':
                return <ButtonVariants {...buttonProps} variant="partner" />;
              default:
                return <ButtonPrimary {...buttonProps} />;
            }
          })}
        </div>
      )}
    </div>

    <!-- Scroll Indicator -->
    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 animate-bounce">
      <div class="w-6 h-10 border-2 border-white/60 rounded-full flex justify-center">
        <div class="w-1 h-3 bg-white/60 rounded-full mt-2 animate-pulse"></div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ heroId, cycleInterval }}>
// Background cycling functionality
document.addEventListener('astro:page-load', () => {
  const hero = document.getElementById(heroId);
  if (!hero) return;
  
  const backgrounds = hero.querySelectorAll('.background-item');
  if (backgrounds.length <= 1) return;
  
  let currentIndex = 0;
  
  // Start cycling
  const cycleBackgrounds = setInterval(() => {
    // Hide current background
    backgrounds[currentIndex].classList.remove('opacity-100');
    backgrounds[currentIndex].classList.add('opacity-0');
    
    // Move to next background
    currentIndex = (currentIndex + 1) % backgrounds.length;
    
    // Show next background
    backgrounds[currentIndex].classList.remove('opacity-0');
    backgrounds[currentIndex].classList.add('opacity-100');
  }, cycleInterval);
  
  // Clean up on component unmount
  return () => clearInterval(cycleBackgrounds);
});
</script>
