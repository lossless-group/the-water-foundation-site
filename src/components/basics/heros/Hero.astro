---
import ButtonPrimary from '../buttons/Button--Primary.astro';
import ButtonSecondary from '../buttons/Button--Secondary.astro';
import ButtonAccent from '../buttons/Button--Accent.astro';

export interface Props {
    contextSetterTxt?: string;
    contextSetterClassName?: string;
    headerTxt?: string;
    headerClassName?: string;
    subHeaderTxt?: string;
    subHeaderClassName?: string;
    supportingCopyTxt?: string;
    supportingCopyClassName?: string;
    ctaTxt?: string;
    ctaClassName?: string;
    noPadding?: boolean;
    paddingClasses?: string;
    cycleInterval?: number;
    targetActionsArray?: Array<{
      text: string;
      href: string;
      variant?: 'primary' | 'secondary' | 'accent';
      buttonVariant?: 'solid' | 'transparent';
      external?: boolean;
    }>;
    backgroundsArray?: Array<{
      type: 'image' | 'gradient' | 'video' | 'gif';
      src?: string;
      alt?: string;
      gradient?: string;
      overlay?: boolean;
      overlayOpacity?: number;
      overlayGradient?: string;
    }>;
}

const {
    contextSetterTxt,
    contextSetterClassName = "",
    headerTxt = "Welcome to The Water Foundation",
    headerClassName = "",
    subHeaderTxt,
    subHeaderClassName = "",
    supportingCopyTxt,
    supportingCopyClassName = "",
    ctaTxt,
    ctaClassName = "",
    noPadding = false,
    paddingClasses = "py-12 md:py-16 lg:py-20",
    targetActionsArray = [],
    backgroundsArray = [],
    cycleInterval = 8000 // Default 8 seconds per background
} = Astro.props;

// Default background if none provided
const defaultBackground = {
    type: 'gradient' as const,
    gradient: 'from-primary-50 to-secondary-100',
    src: undefined,
    alt: undefined,
    overlay: false,
    overlayOpacity: 0.4,
    overlayGradient: undefined
};

const backgrounds = backgroundsArray.length > 0 ? backgroundsArray : [defaultBackground];
const heroId = `hero-${Math.random().toString(36).substr(2, 9)}`;

// Generate background classes based on background type
const getBackgroundClasses = (bg: any) => {
    switch (bg.type) {
      case 'gradient':
        return `bg-gradient-to-br ${bg.gradient || 'from-primary-50 to-secondary-100'}`;
      case 'image':
      case 'gif':
        return 'bg-cover bg-center bg-no-repeat';
      case 'video':
        return 'relative overflow-hidden';
      default:
        return 'bg-secondary-50';
    }
};
---



<section 
  id={heroId}
  class={`relative flex flex-col items-center justify-center w-full min-h-[50vh] overflow-hidden ${!noPadding ? paddingClasses : ''}`}
  style="--cycle-interval: ${cycleInterval}ms"
>
  <!-- Background Container -->
  <div class="backgrounds-container absolute inset-0">
    {backgrounds.map((bg, index: number) => {
      const backgroundClasses = getBackgroundClasses(bg);
      const isFirst = index === 0;
      
      return (
        <div 
          class={`background-item absolute inset-0 transition-opacity duration-1000 ease-in-out ${backgroundClasses} ${isFirst ? 'opacity-100' : 'opacity-0'}`}
          style={`
            z-index: 1;
            ${bg.type === 'image' ? `background-image: url('${bg.src}')` : ''}
          `}
          aria-hidden={!isFirst}
        >
          {bg.type === 'gif' && bg.src && (
            <img
              src={bg.src}
              alt={bg.alt || 'Background animation'}
              class="absolute inset-0 w-full h-full object-cover"
            />
          )}
          
          {bg.type === 'video' && bg.src && (
            <video
              class="absolute inset-0 w-full h-full object-cover"
              autoplay
              muted
              loop
              playsinline
            >
              <source src={bg.src} type="video/mp4" />
            </video>
          )}
          
          {bg.overlay && (
            <div 
              class="absolute inset-0"
              style={`
                z-index: 2;
                ${bg.overlayGradient 
                  ? `background: ${bg.overlayGradient}` 
                  : 'background-color: rgb(15, 23, 42)'
                };
                opacity: ${bg.overlayOpacity || 0.4};
              `}
            ></div>
          )}
        </div>
      );
    })}
  </div>


  <!-- Hero Content -->
  <div class="relative z-10 w-full max-w-[98%] mx-auto text-center space-y-8">
    <!-- Context Setter -->
    {contextSetterTxt && (
      <div class="inline-flex items-center px-4 py-2 rounded-full bg-accent-100 border border-accent-200">
        <span class={`text-sm font-medium text-accent-800 tracking-wide uppercase ${contextSetterClassName}`}>
          {contextSetterTxt}
        </span>
      </div>
    )}

    <!-- Main Header -->
    <div class="space-y-4">
      <h1 class={`font-brand text-4xl md:text-6xl lg:text-7xl font-bold text-secondary-900 leading-tight ${headerClassName}`}>
        {headerTxt}
      </h1>
      
      {subHeaderTxt && (
        <h2 class={`text-xl md:text-2xl lg:text-3xl font-medium text-secondary-700 max-w-4xl mx-auto ${subHeaderClassName}`}>
          {subHeaderTxt}
        </h2>
      )}
    </div>

    <!-- Supporting Copy -->
    {supportingCopyTxt && (
      <div class="max-w-3xl mx-auto">
        <p class={`text-lg md:text-xl text-secondary-600 leading-relaxed ${supportingCopyClassName}`}>
          {supportingCopyTxt}
        </p>
      </div>
    )}

    <!-- Call to Action Section -->
    {(ctaTxt || targetActionsArray.length > 0) && (
      <div class="space-y-6">
        {ctaTxt && (
          <p class={`text-lg font-medium text-secondary-800 ${ctaClassName}`}>
            {ctaTxt}
          </p>
        )}
        
        {targetActionsArray.length > 0 && (
          <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
            {targetActionsArray.map((action, index) => {
              const buttonVariant = action.buttonVariant || 'solid';
              
              switch (action.variant || 'primary') {
                case 'primary':
                  return (
                    <ButtonPrimary
                      href={action.href}
                      text={action.text}
                      external={action.external}
                      variant={buttonVariant}
                    />
                  );
                case 'secondary':
                  return (
                    <ButtonSecondary
                      href={action.href}
                      text={action.text}
                      external={action.external}
                      variant={buttonVariant}
                    />
                  );
                case 'accent':
                  return (
                    <ButtonAccent
                      href={action.href}
                      text={action.text}
                      external={action.external}
                      variant={buttonVariant}
                    />
                  );
                default:
                  return (
                    <ButtonPrimary
                      href={action.href}
                      text={action.text}
                      external={action.external}
                      variant={buttonVariant}
                    />
                  );
              }
            })}
          </div>
        )}
      </div>
    )}

    <!-- Scroll Indicator -->
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
      <div class="w-6 h-10 border-2 border-secondary-400 rounded-full flex justify-center">
        <div class="w-1 h-3 bg-secondary-400 rounded-full mt-2 animate-pulse"></div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ heroId, cycleInterval }}>
// Background cycling functionality
document.addEventListener('astro:page-load', () => {
  const hero = document.getElementById(heroId);
  if (!hero) return;
  
  const backgrounds = hero.querySelectorAll('.background-item');
  if (backgrounds.length <= 1) return;
  
  let currentIndex = 0;
  
  // Start cycling
  const cycleBackgrounds = setInterval(() => {
    // Hide current background
    backgrounds[currentIndex].classList.remove('opacity-100');
    backgrounds[currentIndex].classList.add('opacity-0');
    
    // Move to next background
    currentIndex = (currentIndex + 1) % backgrounds.length;
    
    // Show next background
    backgrounds[currentIndex].classList.remove('opacity-0');
    backgrounds[currentIndex].classList.add('opacity-100');
  }, cycleInterval);
  
  // Clean up on component unmount
  return () => clearInterval(cycleBackgrounds);
});
</script>