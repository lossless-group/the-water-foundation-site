---
interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
  className?: string;
  maxWidth?: string;
}

const {
  title = "Stay Updated",
  description = "Join our newsletter to receive the latest updates and insights.",
  buttonText = "Subscribe",
  className = "",
  maxWidth = "36rem"
} = Astro.props;
---

<div 
  class={`bg-card/50 border border-border rounded-xl p-6 w-full mx-auto ${className}`}
  style={`max-width: ${maxWidth};`}
>
  <div class="text-center mb-6">
    <h3 class="text-2xl font-bold text-foreground mb-2">{title}</h3>
    <p class="text-muted-foreground">{description}</p>
  </div>
  
  <form class="space-y-4" id="signup-form">
    <div>
      <label for="email" class="sr-only">Email address</label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 rounded-lg border border-border bg-background text-foreground placeholder-muted-foreground focus:ring-2 focus:ring-primary/50 focus:border-transparent transition-all duration-200"
        placeholder="Enter your email"
      />
    </div>
    
    <div class="flex items-center">
      <input
        type="checkbox"
        id="privacy"
        name="privacy"
        required
        class="h-4 w-4 rounded border-border text-primary focus:ring-primary/50"
      />
      <label for="privacy" class="ml-2 text-sm text-muted-foreground">
        I agree to the <a href="/privacy" class="text-primary hover:underline">Privacy Policy</a>
      </label>
    </div>
    
    <button
      type="submit"
      class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary/50 transition-all duration-200"
    >
      {buttonText}
    </button>
  </form>
  
  <p class="mt-3 text-xs text-center text-muted-foreground">
    We respect your inbox. No spam, ever.
  </p>
</div>

<style>
  /* Add smooth focus states */
  input:focus, button:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
  
  /* Add subtle hover effect on the form container */
  .hover\:shadow-hover:hover {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  }
  
  /* Animation for form submission */
  @keyframes buttonSuccess {
    0% { background-color: rgb(14, 165, 233); }
    50% { background-color: rgb(16, 185, 129); }
    100% { background-color: rgb(14, 165, 233); }
  }
  
  .button-success {
    animation: buttonSuccess 2s ease-in-out;
  }
</style>

<script>
  // Client-side form handling
  (() => {
    const form = document.querySelector('#signup-form') as HTMLFormElement;
    if (!form) return;

    const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalButtonText = button?.textContent || 'Submit';

    const handleSubmit = async (event: Event) => {
      event.preventDefault();
      if (!button) return;

      try {
        // Disable button and show loading state
        button.disabled = true;
        button.textContent = 'Sending...';
        
        const formData = new FormData(form);
        
        // Here you would typically send the form data to your API
        // const response = await fetch('/api/signup', {
        //   method: 'POST',
        //   body: formData
        // });
        
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Show success state
        button.textContent = 'Success!';
        button.classList.add('button-success');
        form.reset();
        
        // Reset button after delay
        setTimeout(() => {
          if (!button) return;
          button.disabled = false;
          button.textContent = originalButtonText;
          button.classList.remove('button-success');
        }, 3000);
        
      } catch (error) {
        console.error('Error submitting form:', error);
        if (button) {
          button.textContent = 'Error, try again';
          button.disabled = false;
        }
      }
    };

    form.addEventListener('submit', handleSubmit);
    
    // Cleanup event listener if the component is removed from the DOM
    return () => {
      form.removeEventListener('submit', handleSubmit);
    };
  })();
</script>
