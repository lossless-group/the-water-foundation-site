---
/**
 * SlidesControlButtons Component
 * Control buttons for RevealJS presentations
 * Includes Exit, Restart, Fullscreen, and Mode Toggle functionality
 */
---

<div class="control-buttons">
  <!-- Exit button -->
  <a href="/slides/" class="control-button exit-button" title="Back to Presentations">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 18l-6-6 6-6"/>
    </svg>
    Exit
  </a>
  
  <!-- Restart button -->
  <button class="control-button restart-button" title="Restart Presentation" onclick="Reveal.slide(0, 0)">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
      <path d="M21 3v5h-5"/>
      <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
      <path d="M3 21v-5h5"/>
    </svg>
    Restart
  </button>
  
  <!-- Fullscreen button -->
  <button class="control-button fullscreen-button" title="Toggle Fullscreen" onclick="toggleFullscreen()">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/>
    </svg>
    Fullscreen
  </button>
  
  <!-- Mode Toggle button -->
  <button class="control-button mode-toggle-button" title="Toggle dark/light mode" onclick="toggleSlidesMode()">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon">
      <circle cx="12" cy="12" r="5"/>
      <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon" style="display: none;">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
    Mode
  </button>
</div>

<style>
  /* Control buttons styling */
  .control-buttons {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 9999;
    display: flex;
    gap: 0.75rem;
    pointer-events: auto;
    background: rgba(var(--color-primary-900), 0.7);
    color: rgb(var(--color-primary-50));
    padding: 0.5rem;
    border-radius: var(--radius-lg);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(var(--color-primary-50), 0.1);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
  }
  
  .control-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.875rem;
    background: rgba(22, 78, 99, 0.5); /* --color-primary-900 with 0.5 alpha */
    color: #ecfeff !important; /* --color-primary-50 as hex */
    border: 1px solid rgba(236, 254, 255, 0.1);
    border-radius: var(--radius-md);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: var(--font-weight-medium);
    font-family: var(--font-family-primary);
    transition: all 0.2s ease;
    cursor: pointer;
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  /* Force SVG icons to be light */
  .control-button svg {
    stroke: #ecfeff !important; /* --color-primary-50 as hex */
    fill: none;
  }
  
  .control-button:hover {
    background: rgba(21, 94, 117, 0.7); /* --color-primary-800 with 0.7 alpha */
    border-color: rgba(236, 254, 255, 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  .exit-button {
    background: rgba(var(--color-accent-700), 0.8);
    color: white;
    border-color: rgba(255, 255, 255, 0.2);
  }
  
  .exit-button:hover {
    background: rgba(var(--color-accent-600), 0.9);
    border-color: rgba(255, 255, 255, 0.3);
  }

  /* Icons - base styles */
  .control-button svg {
    stroke-width: 2.2px;
    stroke: inherit;
    fill: none;
  }

  /* Hide text on small screens */
  @media (max-width: 768px) {
    .control-buttons {
      top: 1rem;
      right: 1rem;
      padding: 0.4rem;
      gap: 0.5rem;
    }
    
    .control-button {
      padding: 0.5rem;
      font-size: 0;
    }
    
    .control-button svg {
      margin: 0;
    }
  }

  /* Fullscreen styles */
  :fullscreen .control-buttons {
    opacity: 0.3;
    transition: all 0.3s ease;
    background: rgba(var(--color-primary-900), 0.7);
  }
  
  :fullscreen .control-buttons:hover {
    opacity: 1;
    background: rgba(var(--color-primary-900), 0.8);
    backdrop-filter: blur(12px);
  }
</style>

<script is:inline>
  // Control functions for slides
  function toggleFullscreen() {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
  }

  // Update mode toggle button icons
  function updateModeButton(isDark) {
    const sunIcon = document.querySelector('.sun-icon');
    const moonIcon = document.querySelector('.moon-icon');
    const button = document.querySelector('.mode-toggle-button');
    
    if (sunIcon && moonIcon && button) {
      if (isDark) {
        sunIcon.style.display = 'none';
        moonIcon.style.display = 'block';
        button.setAttribute('title', 'Switch to light mode');
      } else {
        sunIcon.style.display = 'block';
        moonIcon.style.display = 'none';
        button.setAttribute('title', 'Switch to dark mode');
      }
    }
  }

  // Ensure mode toggle works in slides context
  function initSlidesMode() {
    const savedMode = localStorage.getItem('mode');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const mode = savedMode || (systemPrefersDark ? 'dark' : 'light');
    const isDark = mode === 'dark';
    
    document.documentElement.classList.toggle('dark', isDark);
    document.documentElement.setAttribute('data-mode', mode);
    updateModeButton(isDark);
  }

  // Toggle mode function for slides
  function toggleSlidesMode() {
    const isDark = document.documentElement.classList.toggle('dark');
    const mode = isDark ? 'dark' : 'light';
    
    document.documentElement.setAttribute('data-mode', mode);
    localStorage.setItem('mode', mode);
    updateModeButton(isDark);
  }

  // Initialize mode when component loads
  document.addEventListener('DOMContentLoaded', () => {
    initSlidesMode();

    // Listen for system mode changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('mode')) {
        const isDark = e.matches;
        document.documentElement.classList.toggle('dark', isDark);
        document.documentElement.setAttribute('data-mode', isDark ? 'dark' : 'light');
        updateModeButton(isDark);
      }
    });
  });
</script>
