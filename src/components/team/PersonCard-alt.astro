---
import SocialIcons from '../ui/SocialIcons.astro';

type SocialPlatform = 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'youtube';

interface SocialLink {
  name: string;
  href: string;
  icon: SocialPlatform;
}

interface PersonProps {
  name: string;
  role: string;
  image: string;
  bio: string;
  socialLinks?: Array<{
    name: string;
    href: string;
    icon?: SocialPlatform;
  }>;
  className?: string;
  maxWords?: number;
}

const { 
  name, 
  role, 
  image, 
  bio, 
  socialLinks = [], 
  className = '',
  maxWords = 25
} = Astro.props as PersonProps;

// Function to truncate text to a certain number of words
const truncateText = (text: string, words: number) => {
  const wordArray = text.split(' ');
  if (wordArray.length <= words) return { text, isTruncated: false };
  return {
    text: wordArray.slice(0, words).join(' ') + '...',
    isTruncated: true
  };
};

const truncatedBio = truncateText(bio, maxWords);

// Map social links to include the correct icon type
const mappedSocialLinks = socialLinks.map(link => ({
  name: link.name,
  href: link.href,
  icon: link.icon || link.name.toLowerCase() as SocialPlatform
}));
---

<article class:list={[
  'bg-background/80 backdrop-blur-sm rounded-xl overflow-hidden border border-border/10',
  'transition-all duration-300 hover:shadow-lg hover:shadow-primary/10',
  'flex flex-col h-full',
  className
]}>
  <div class="relative aspect-square overflow-hidden">
    <img 
      src={image} 
      alt={`Portrait of ${name}`}
      class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
      loading="lazy"
      width="400"
      height="400"
    />
  </div>
  
  <div class="p-6 flex-1 flex flex-col">
    <div class="mb-2">
      <h3 class="text-xl font-semibold text-foreground">{name}</h3>
      <p class="text-primary/80 text-sm font-medium">{role}</p>
    </div>
    
    <div class="mb-4 flex-1">
      <p class="text-foreground/80 text-sm mb-2" id={`bio-${name.toLowerCase().replace(/\s+/g, '-')}`}>
        {truncatedBio.isTruncated ? (
          <>
            {truncatedBio.text}
            <button 
              onclick="this.previousElementSibling.textContent = this.previousElementSibling.getAttribute('data-full-bio') || this.previousElementSibling.textContent; this.remove()"
              class="text-primary font-medium hover:underline focus:outline-none focus:ring-2 focus:ring-primary/50 rounded ml-1"
              data-full-bio={bio}
            >
              Read more
            </button>
          </>
        ) : (
          bio
        )}
      </p>
    </div>
    
    {mappedSocialLinks.length > 0 && (
      <div class="mt-auto pt-4 border-t border-border/10">
        <SocialIcons 
          socialLinks={mappedSocialLinks}
          iconSize="sm"
          className="justify-start space-x-3"
        />
      </div>
    )}
  </div>
</article>
