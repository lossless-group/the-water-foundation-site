---
import SocialIcons from '../ui/SocialIcons.astro';

type SocialPlatform = 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'youtube';

interface SocialLink {
  name: string;
  href: string;
  icon: SocialPlatform;
}

interface PersonProps {
  name: string;
  role: string;
  image: string;
  bio: string;
  socialLinks?: Array<{
    name: string;
    href: string;
  }>;
  className?: string;
  maxWords?: number;
}

const { 
  name, 
  role, 
  image, 
  bio, 
  socialLinks = [], 
  className = '',
  maxWords = 25
} = Astro.props as PersonProps;

// Function to truncate text to a certain number of words
const truncateText = (text: string, words: number) => {
  const wordArray = text.split(' ');
  if (wordArray.length <= words) return { text, isTruncated: false };
  return {
    text: wordArray.slice(0, words).join(' ') + '...',
    isTruncated: true
  };
};

const truncatedBio = truncateText(bio, maxWords);

// Map social links to include the correct icon type
const mappedSocialLinks = socialLinks.map(link => ({
  name: link.name,
  href: link.href,
  icon: link.name.toLowerCase() as SocialPlatform
}));
---

<article class:list={[
  'bg-white/20 backdrop-blur-xl rounded-3xl overflow-hidden border border-white/30 shadow-lg',
  'transition-all duration-300 hover:shadow-xl hover:scale-105 hover:bg-white/25',
  'flex flex-col h-full group',
  className
]}>
  <!-- Photo section -->
  <div class="relative aspect-square overflow-hidden">
    <img 
      src={image} 
      alt={`Portrait of ${name}`}
      class="w-full h-full object-cover transition-all duration-300 group-hover:scale-105"
      loading="lazy"
      width="400"
      height="400"
    />
  </div>
  
  <!-- Content section -->
  <div class="p-6 flex-1 flex flex-col">
    <div class="mb-3">
      <h3 class="text-xl font-semibold text-white text-center group-hover:text-blue-100 transition-colors duration-300">{name}</h3>
      <p class="text-blue-100/90 text-sm font-medium text-center group-hover:text-blue-100 transition-colors duration-300 mt-1">{role}</p>
    </div>
    
    <div class="mb-4 flex-1">
      <p class="text-blue-50/80 text-sm leading-relaxed text-center group-hover:text-blue-50/95 transition-colors duration-300" id={`bio-${name.toLowerCase().replace(/\s+/g, '-')}`}>
        {truncatedBio.isTruncated ? (
          <>
            <span class="truncated-text">{truncatedBio.text}</span>
            <button 
              onclick="expandBio(this)"
              class="text-blue-200 font-medium hover:text-blue-100 hover:underline focus:outline-none focus:ring-2 focus:ring-blue-300/50 rounded ml-1 transition-colors duration-300"
              data-full-bio={bio}
            >
              Read more
            </button>
          </>
        ) : (
          bio
        )}
      </p>
    </div>
    
    {mappedSocialLinks.length > 0 && (
      <div class="mt-auto pt-4 border-t border-white/20 group-hover:border-white/30 transition-colors duration-300">
        <SocialIcons 
          socialLinks={mappedSocialLinks}
          iconSize="sm"
          className="justify-start space-x-3"
        />
      </div>
    )}
  </div>
</article>

<script>
  function expandBio(button) {
    const fullBio = button.getAttribute('data-full-bio');
    const truncatedText = button.previousElementSibling;
    
    if (truncatedText && fullBio) {
      truncatedText.textContent = fullBio;
      button.remove();
    }
  }
</script>
