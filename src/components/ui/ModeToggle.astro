---
// ModeToggle.astro - A theme toggle button component
---

<button 
  type="button"
  class="mode-toggle p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors w-10 h-10 flex items-center justify-center"
  title="Toggle dark/light mode"
  aria-label="Toggle dark mode"
  data-theme-toggle
>
  <!-- Two icons; CSS switches visibility based on mode -->
  <img
    src="/icons/sun.svg"
    alt="Switch to dark mode"
    width="20"
    height="20"
    class="sun-icon w-5 h-5"
    aria-hidden="true"
  />
  <img
    src="/icons/moon.svg"
    alt="Switch to light mode"
    width="20"
    height="20"
    class="moon-icon w-5 h-5"
    aria-hidden="true"
  />
</button>

<script is:inline>
  // Centralized mode switching via global utility (loaded in base layout)
  // Fallback: dynamically import if not yet available

  function updateAllToggleButtons(isDark) {
    const buttons = document.querySelectorAll('[data-theme-toggle]');
    buttons.forEach((btn) => {
      btn.setAttribute('aria-pressed', String(isDark));
      const label = isDark ? 'Switch to light mode' : 'Switch to dark mode';
      btn.setAttribute('aria-label', label);
      btn.setAttribute('title', label);
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    let modeSwitcher = window.modeSwitcher;
    if (!modeSwitcher) {
      try {
        const mod = await import('/src/utils/mode-switcher.js');
        modeSwitcher = window.modeSwitcher || mod.modeSwitcher;
      } catch (e) {
        console.warn('Mode switcher module failed to load', e);
      }
    }
    // Initialize button state from utility
    if (modeSwitcher) {
      const isDark = (modeSwitcher.getStoredMode() || modeSwitcher.getSystemPreference()) === 'dark';
      updateAllToggleButtons(isDark);
    }

    // Click handler: delegate to utility
    document.addEventListener('click', (event) => {
      const toggle = event.target.closest('[data-theme-toggle]');
      if (!toggle) return;
      if (modeSwitcher) {
        const newMode = modeSwitcher.toggleMode();
        updateAllToggleButtons(newMode === 'dark');
      }
    });

    // Sync when utility dispatches mode changes (and on other tabs/windows)
    if (modeSwitcher) {
      window.addEventListener('mode-change', (e) => {
        const newMode = e?.detail?.mode || modeSwitcher.getCurrentMode();
        updateAllToggleButtons(newMode === 'dark');
      });
    }

    // Respect system changes only when no explicit preference is stored
    if (modeSwitcher) {
      const mq = window.matchMedia('(prefers-color-scheme: dark)');
      const systemListener = (e) => {
        if (!modeSwitcher.getStoredMode()) {
          modeSwitcher.applyMode(e.matches ? 'dark' : 'light');
          updateAllToggleButtons(e.matches);
        }
      };
      mq.addEventListener('change', systemListener);
    }
  });
</script>

<style is:global>
  /* Default to light (sun visible) */
  .sun-icon { display: block; }
  .moon-icon { display: none; }

  /* When in dark mode via data attribute */
  html[data-mode="dark"] .sun-icon { display: none; }
  html[data-mode="dark"] .moon-icon { display: block; }

  /* Also support Tailwind's .dark class */
  html.dark .sun-icon { display: none; }
  html.dark .moon-icon { display: block; }
</style>
