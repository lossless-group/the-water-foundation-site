---
// ModeToggle.astro - A theme toggle button component
---

<button 
  type="button"
  class="mode-toggle p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors w-10 h-10 flex items-center justify-center"
  title="Toggle dark/light mode"
  aria-label="Toggle dark mode"
  data-theme-toggle
>
  <picture>
    <source
      srcset="/icons/moon.svg"
      media="(prefers-color-scheme: dark)"
      width="20"
      height="20"
    />
    <img
      src="/icons/sun.svg"
      alt="Theme toggle icon"
      width="20"
      height="20"
      class="w-5 h-5"
      data-theme-icon
    />
  </picture>
</button>

<script is:inline>
  // Toggle between light and dark mode
  function toggleMode() {
    const html = document.documentElement;
    const currentMode = html.getAttribute('data-mode');
    const newMode = currentMode === 'dark' ? 'light' : 'dark';
    
    // Update the data-mode attribute on html element
    if (newMode === 'dark') {
      html.setAttribute('data-mode', 'dark');
    } else {
      html.removeAttribute('data-mode');
    }
    
    // Also set class for Tailwind dark mode if needed
    if (newMode === 'dark') {
      html.classList.add('dark');
    } else {
      html.classList.remove('dark');
    }
    
    // Save preference to localStorage
    localStorage.setItem('mode', newMode);
    
    // Update button state
    updateButton(newMode === 'dark');
  }
  
  // Update button state
  function updateButton(isDark) {
    const button = document.querySelector('.mode-toggle');
    if (!button) return;
    
    button.setAttribute('aria-pressed', isDark);
    button.setAttribute('aria-label', isDark ? 'Switch to light mode' : 'Switch to dark mode');
    button.setAttribute('title', isDark ? 'Switch to light mode' : 'Switch to dark mode');
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Set initial mode from localStorage or system preference
    const savedMode = localStorage.getItem('mode');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedMode === 'dark' || (!savedMode && prefersDark)) {
      document.documentElement.setAttribute('data-mode', 'dark');
      document.documentElement.classList.add('dark');
      updateButton(true);
    } else {
      document.documentElement.removeAttribute('data-mode');
      document.documentElement.classList.remove('dark');
      updateButton(false);
    }
    
    // Handle button click
    document.addEventListener('click', (event) => {
      if (event.target.closest('[data-theme-toggle]')) {
        toggleMode();
      }
    });
    
    // Listen for system color scheme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
      if (!localStorage.getItem('mode')) {
        if (e.matches) {
          document.documentElement.setAttribute('data-mode', 'dark');
          document.documentElement.classList.add('dark');
          updateButton(true);
        } else {
          document.documentElement.removeAttribute('data-mode');
          document.documentElement.classList.remove('dark');
          updateButton(false);
        }
      }
    });
  });
</script>
