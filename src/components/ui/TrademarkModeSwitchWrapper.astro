---
// src/components/ui/ThemeImage.astro

interface Props {
  lightSrc: string;
  darkSrc?: string;
  alt: string;
  className?: string;
  loading?: 'eager' | 'lazy';
  width?: number | string;
  height?: number | string;
  decoding?: 'sync' | 'async' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const props = Astro.props as Props;
const lightSrc = props.lightSrc;
const darkSrc = props.darkSrc || lightSrc; // Fallback to lightSrc if darkSrc not provided
const alt = props.alt;
const className = props.className || '';
const loading = props.loading || 'lazy';
const width = props.width || '100%';
const height = props.height || 'auto';
const decoding = props.decoding || 'async';
const fetchpriority = props.fetchpriority || 'auto';
---

<div class="theme-image-container relative w-full h-full">
  <!-- Light mode image (hidden in dark mode) -->
  <img
    src={lightSrc}
    alt={alt}
    loading={loading}
    width={width}
    height={height}
    decoding={decoding}
    fetchpriority={fetchpriority}
    class:list={[
      'block dark:hidden w-full h-full object-contain',
      className
    ]}
  />
  
  <!-- Dark mode image (hidden in light mode) -->
  <img
    src={darkSrc}
    alt={alt}
    loading={loading}
    width={width}
    height={height}
    decoding={decoding}
    fetchpriority={fetchpriority}
    class:list={[
      'hidden dark:block w-full h-full object-contain',
      className
    ]}
  />
</div>

<style>
  .theme-image-container {
    position: relative;
  }

  /* Default: show light image, hide dark image */
  .light-image {
    opacity: 1;
  }
  
  .dark-image {
    opacity: 0;
  }

  /* Theme switching based on data-mode attribute */
  :global([data-mode="dark"]) .light-image {
    opacity: 0;
  }
  
  :global([data-mode="dark"]) .dark-image {
    opacity: 1;
  }
  

  
  /* Smooth transitions */
  .light-image,
  .dark-image {
    transition: opacity 0.2s ease-in-out;
  }
</style>
