---
import BaseThemeLayout from '../../layouts/BaseThemeLayout.astro';
import ColorVariableGrid from '../../components/design-system/ColorVariableGrid.astro';
import TextStylePatternsGrid from '../../components/design-system/TextStylePatternsGrid.astro';
---

<BaseThemeLayout 
  title="Brand Kit | The Water Foundation"
  description="Explore our brand assets and guidelines."
  themeClass="theme-water"
  containerClass="max-w-7xl mx-auto"
  ogImage="/ogImageLandscape__The-Water-Foundation.jpg"
  ogImagePortrait="/ogImagePortrait__The-Water-Foundation.jpg"
>
	<div class="max-w-4xl mx-auto">
		<h1 class="text-4xl font-bold text-primary-600 mb-6">Water Foundation Brand Kit & Theme System</h1>
		
		<div class="mb-8 space-y-4">
			<div>
				<button 
					id="theme-toggle" 
					style="background: blue; color: white; padding: 12px 24px; margin-right: 16px; border: none; border-radius: 8px; cursor: pointer;"
				>
					Toggle to Water Theme
				</button>
				<button 
					id="mode-toggle" 
					style="background: green; color: white; padding: 12px 24px; border: none; border-radius: 8px; cursor: pointer;"
				>
					Toggle to Dark Mode
				</button>
			</div>
		</div>

		<ColorVariableGrid />

		<TextStylePatternsGrid />
	</div>

	<script>
		import { themeSwitcher } from '../../utils/theme-switcher';
		import { modeSwitcher } from '../../utils/mode-switcher';

		document.addEventListener('DOMContentLoaded', () => {
			const themeToggleButton = document.getElementById('theme-toggle') as HTMLButtonElement | null;
			const modeToggleButton = document.getElementById('mode-toggle') as HTMLButtonElement | null;
			
			// Check if buttons exist
			if (!themeToggleButton || !modeToggleButton) {
				console.error('Theme or mode toggle button not found');
				return;
			}

			// Theme toggle functionality
			function updateThemeButtonText() {
				if (!themeToggleButton) return;
				const currentTheme = themeSwitcher.getCurrentTheme();
				themeToggleButton.textContent = currentTheme === 'default' 
					? 'Toggle to Water Theme' 
					: 'Toggle to Default Theme';
			}
			
			// Mode toggle functionality
			function updateModeButtonText() {
				if (!modeToggleButton) return;
				const currentMode = modeSwitcher.getCurrentMode();
				modeToggleButton.textContent = currentMode === 'light' 
					? 'Toggle to Dark Mode' 
					: 'Toggle to Light Mode';
			}

			// Theme toggle click handler
			themeToggleButton.addEventListener('click', () => {
				themeSwitcher.toggleTheme();
				updateThemeButtonText();
			});
			
			// Mode toggle click handler
			modeToggleButton.addEventListener('click', () => {
				modeSwitcher.toggleMode();
				updateModeButtonText();
			});

			// Listen for theme changes to update UI
			window.addEventListener('theme-change', () => {
				updateThemeButtonText();
			});

			// Listen for mode changes to update UI
			window.addEventListener('mode-change', () => {
				updateModeButtonText();
			});
			
			// Initialize button texts
			updateThemeButtonText();
			updateModeButtonText();

			// Log current settings for debugging
			console.log('Initial theme:', themeSwitcher.getCurrentTheme());
			console.log('Initial mode:', modeSwitcher.getCurrentMode());
		});
	</script>
</BoilerPlateHTML>